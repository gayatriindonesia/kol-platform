generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                               String         @id @default(cuid())
  name                             String?
  email                            String?        @unique
  password                         String?
  emailVerified                    DateTime?
  image                            String?
  role                             UserRole?
  accounts                         Account[]
  AuditLog_AuditLog_targetIdToUser AuditLog[]     @relation("AuditLog_targetIdToUser")
  AuditLog_AuditLog_userIdToUser   AuditLog[]     @relation("AuditLog_userIdToUser")
  brands                           Brand[]
  influencers                      Influencer?
  Notification                     Notification[]
  sessions                         Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  token   String   @unique
  expires DateTime
  email   String   @unique
  id      String   @id @default(uuid())
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String   @unique
  token   String   @unique
  expires DateTime
}

model Brand {
  id                 String               @id @default(cuid())
  name               String
  userId             String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaigns          Campaign[]
  CampaignInvitation CampaignInvitation[]
}

model Campaign {
  id                 String               @id @default(cuid())
  name               String
  goal               String?
  brandId            String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  directData         Json?
  selfServiceData    Json?
  type               CampaignType
  endDate            DateTime
  startDate          DateTime
  status             CampaignStatus       @default(PENDING)
  brands             Brand                @relation(fields: [brandId], references: [id])
  
  // Relations
  CampaignInvitation  CampaignInvitation[]
  metrics             InfluencerPlatformMetric[]   // snapshot metrics untuk campaign ini
  snapshots           CampaignMetricSnapshot[]     // frozen metrics saat campaign berakhir
  performance          CampaignPerformance?
  deliverables         CampaignDeliverable[]

  mou                    MOU?              // One-to-one relation dengan MOU
  
  // Status enhancement untuk MOU flow
  mouRequired            Boolean           @default(true)   // Apakah campaign ini butuh MOU
  canStartWithoutMOU     Boolean           @default(false)  // Emergency bypass untuk campaign urgent

  // Payment
  paymentMethodId    String?         
  paymentMethod      PaymentMethod?  @relation(fields: [paymentMethodId], references: [id])
  bankId             String?         // opsional, kalau mau spesifik bank di campaign
  bank               Bank?           @relation(fields: [bankId], references: [id])


}

model Influencer {
  id                 String               @id @default(cuid())
  userId             String               @unique
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  
  // Relations
  categories          InfluencerCategory[]
  platforms           InfluencerPlatform[]
  deliverables        CampaignDeliverable[]
  CampaignInvitation  CampaignInvitation[]
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model Category {
  id          String               @id @default(cuid())
  name        String               @unique
  description String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  influencers InfluencerCategory[]
}

model InfluencerCategory {
  influencerId String
  categoryId   String
  category     Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  influencer   Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)

  @@id([influencerId, categoryId])
}

model Platform {
  id          String               @id @default(cuid())
  name        String               @unique
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  influencers InfluencerPlatform[]
  services    Service[]
}

model InfluencerPlatform {
  id                  String     @id @default(cuid())
  influencerId        String
  platformId          String
  accessToken         String?
  followers           Int        @default(0)
  lastSynced          DateTime?
  platformData        Json?
  posts               Int        @default(0)
  refreshToken        String?
  tokenExpiresAt      DateTime?
  username            String
  openId              String?    @unique
  igAccountType       String?
  igBusinessAccountId String?
  igEngagementRate    Float?
  igMediaCount        Int?
  igUserId            String?
  commentsCount       Int?       @default(0)
  engagementRate      Float?     @default(0)
  likesCount          Int?       @default(0)
  savesCount          Int?       @default(0)
  sharesCount         Int?       @default(0)
  views               Int        @default(0)
  influencer          Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)
  platform            Platform   @relation(fields: [platformId], references: [id], onDelete: Cascade)
  metrics             InfluencerPlatformMetric[]   // historical metrics
  rateCards           RateCard[]

  @@unique([influencerId, platformId])
}

// untuk historical metrics per platform (followers, likes, comments, engagement rate, dll).
model InfluencerPlatformMetric {
  id                     String               @id @default(cuid())
  influencerPlatformId   String
  influencerPlatform     InfluencerPlatform   @relation(fields: [influencerPlatformId], references: [id], onDelete: Cascade)
  campaignId             String?              // optional: untuk tracking per campaign
  campaign               Campaign?            @relation(fields: [campaignId], references: [id], onDelete: SetNull)
  
  // Metrics data
  followers              Int
  following              Int?
  posts                  Int?
  likes                  Int                  @default(0)
  comments               Int                  @default(0)
  shares                 Int                  @default(0)
  saves                  Int                  @default(0)
  views                  Int?                 @default(0)
  engagementRate         Float
  avgLikesPerPost        Float?
  avgCommentsPerPost     Float?
  
  // Metadata
  metricType             MetricType           @default(PERIODIC) // CAMPAIGN_START, CAMPAIGN_END, PERIODIC
  recordedAt             DateTime             @default(now())
  dataSource             String?              // API, MANUAL, SCRAPING
  
  @@index([campaignId, recordedAt])
  @@index([influencerPlatformId, recordedAt])
}

// untuk membekukan data performa saat campaign start & end (supaya bisa dihitung growth).
model CampaignMetricSnapshot {
  id                     String    @id @default(cuid())
  campaignId             String
  campaign               Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  influencerId           String
  platformId             String
  
  // Frozen metrics data
  startMetrics           Json      // metrics saat campaign dimulai
  endMetrics             Json      // metrics saat campaign berakhir
  growthMetrics          Json      // perhitungan growth selama campaign
  
  // Summary data
  totalGrowthFollowers   Int       @default(0)
  totalGrowthEngagement  Float     @default(0)
  performanceScore       Float?    // calculated performance score
  
  createdAt              DateTime  @default(now())
  
  @@unique([campaignId, influencerId, platformId])
  @@index([campaignId])
}

// Tambahan untuk schema Prisma yang sudah ada

// Model untuk tracking deliverables campaign
model CampaignDeliverable {
  id                     String                    @id @default(cuid())
  campaignId             String
  influencerId           String
  title                  String                    // "Instagram Post", "Story", "Reel"
  description            String?
  requiredCount          Int                       @default(1)
  deliveredCount         Int                       @default(0)
  dueDate                DateTime
  status                 DeliverableStatus         @default(PENDING)
  createdAt              DateTime                  @default(now())
  updatedAt              DateTime                  @updatedAt

  campaign               Campaign                  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  influencer             Influencer                @relation(fields: [influencerId], references: [id], onDelete: Cascade)
  submissions            DeliverableSubmission[]

  @@unique([campaignId, influencerId, title])
}

model DeliverableSubmission {
  id                     String                    @id @default(cuid())
  deliverableId          String
  url                    String?                   // URL post/content
  submittedAt            DateTime                  @default(now())
  approvedAt             DateTime?
  rejectedAt             DateTime?
  feedback               String?
  reachCount             Int?                      // actual reach dari post ini
  impressions            Int?                      // impressions dari post ini
  engagementCount        Int?                      // total engagement (likes + comments + shares)
  
  deliverable            CampaignDeliverable       @relation(fields: [deliverableId], references: [id], onDelete: Cascade)
}

// Enhanced CampaignInvitation untuk response tracking
// Tambah field ini ke model CampaignInvitation yang sudah ada:
// sentViaEmail         Boolean   @default(false)
// sentViaPlatform      Boolean   @default(false)  
// viewedAt             DateTime?
// firstContactAt       DateTime?

// Model untuk campaign performance summary
model CampaignPerformance {
  id                     String    @id @default(cuid())
  campaignId             String    @unique
  campaign               Campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  // Reach Metrics
  totalReach             Int       @default(0)
  totalImpressions       Int       @default(0)
  avgReachRate           Float     @default(0)
  
  // Engagement Metrics  
  totalEngagements       Int       @default(0)
  avgEngagementRate      Float     @default(0)
  
  // Response Metrics
  totalInvitations       Int       @default(0)
  totalResponses         Int       @default(0)
  responseRate           Float     @default(0)
  
  // Completion Metrics
  totalDeliverables      Int       @default(0)
  completedDeliverables  Int       @default(0)
  completionRate         Float     @default(0)
  
  // On-Time Delivery
  onTimeDeliveries       Int       @default(0)
  lateDeliveries         Int       @default(0)
  onTimeDeliveryRate     Float     @default(0)
  
  // Summary dates
  calculatedAt           DateTime  @default(now())
  lastUpdated            DateTime  @updatedAt
}

model Service {
  id          String     @id @default(cuid())
  name        String
  description String?
  type        String
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  platformId  String
  platform    Platform   @relation(fields: [platformId], references: [id])
  rateCards   RateCard[] // Added opposite relation field

  @@unique([platformId, name])
}

model RateCard {
  id                  String              @id @default(cuid())
  influencerPlatformId String
  serviceId           String
  price               Int
  description         String?
  autoGenerated       Boolean  @default(false)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  influencerPlatform  InfluencerPlatform @relation(fields: [influencerPlatformId], references: [id], onDelete: Cascade)
  service             Service            @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([influencerPlatformId, serviceId])
}


model OAuthState {
  id           String   @id @default(cuid())
  state        String   @unique
  codeVerifier String
  userId       String
  createdAt    DateTime @default(now())
  provider     String
  redirectUri  String?

  @@index([provider, userId])
}

model AuditLog {
  id                           String   @id @default(cuid())
  action                       String
  message                      String
  userId                       String
  targetId                     String
  createdAt                    DateTime @default(now())
  User_AuditLog_targetIdToUser User     @relation("AuditLog_targetIdToUser", fields: [targetId], references: [id])
  User_AuditLog_userIdToUser   User     @relation("AuditLog_userIdToUser", fields: [userId], references: [id])
}

model CampaignInvitation {
  id              String         @id @default(cuid())
  campaignId      String
  influencerId    String
  status          CampaignStatus @default(PENDING)
  message         String?
  responseMessage String?
  invitedAt       DateTime       @default(now())
  respondedAt     DateTime?
  brandId         String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime        @updatedAt
  brand           Brand          @relation(fields: [brandId], references: [id], onDelete: Cascade)
  campaign        Campaign       @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  influencer      Influencer     @relation(fields: [influencerId], references: [id], onDelete: Cascade)
  // MOU tracking
  mouCreationRequested   Boolean           @default(false)
  mouCreatedAt           DateTime?
  mouCreatedBy           String?           // User ID yang request MOU creation

  @@unique([campaignId, influencerId])
}

model Notification {
  id        String          @id @default(cuid())
  userId    String
  role      UserRole?
  title     String
  message   String
  data      Json?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  type      NotificationType
  User      User             @relation(fields: [userId], references: [id])

  @@index([type, createdAt], map: "idx_type_created")
  @@index([userId, isRead], map: "idx_user_unread")
}

// Payment LIST
model PaymentMethod {
  id          String            @id @default(cuid())
  name        String            // misalnya "Bank Transfer", "Credit Card", "E-Wallet"
  code        String            @unique // misalnya "BANK_TRANSFER"
  description String?
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  banks       Bank[]            // Relasi ke daftar bank
  campaigns   Campaign[]
}

model Bank {
  id              String         @id @default(cuid())
  name            String         // misalnya "BCA", "Mandiri", "BNI"
  accountNumber   String?        // opsional, kalau mau langsung simpan nomor rekening
  accountName     String?        // opsional, nama pemilik rekening
  isActive        Boolean        @default(true)
  paymentMethodId String
  paymentMethod   PaymentMethod  @relation(fields: [paymentMethodId], references: [id])

  campaigns       Campaign[]
  @@unique([paymentMethodId, name])
}

// Tambahan untuk fitur MOU
model MOU {
  id                    String            @id @default(cuid())
  campaignId            String            @unique
  campaign              Campaign          @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  // Basic Information
  mouNumber             String            @unique // Auto-generated MOU number
  title                 String
  description           String?
  
  // Parties Information
  brandName             String            // Nama brand/company
  brandAddress          String?
  brandRepresentative   String            // PIC dari brand
  brandEmail            String
  brandPhone            String?
  
  influencerName        String            // Nama influencer
  influencerAddress     String?
  influencerEmail       String
  influencerPhone       String?
  influencerTaxId       String?           // NPWP untuk influencer
  
  // Campaign Details in MOU
  campaignObjective     String            // Tujuan campaign
  campaignScope         String            // Ruang lingkup kerja sama
  deliverableDetails    Json              // Detail deliverables dalam format JSON
  
  // Timeline
  effectiveDate         DateTime          // Tanggal mulai berlaku
  expiryDate           DateTime          // Tanggal berakhir
  
  // Financial Terms
  totalBudget          Int               // Total budget campaign
  paymentTerms         String            // Term pembayaran (50% DP, 50% setelah selesai, dll)
  paymentSchedule      Json?             // Jadwal pembayaran dalam JSON
  
  // Legal Terms
  termsAndConditions   String            // Syarat dan ketentuan
  cancellationClause   String?           // Klausul pembatalan
  confidentialityClause String?          // Klausul kerahasiaan
  intellectualProperty  String?          // Hak kekayaan intelektual
  
  // Status & Approval Flow
  status               MOUStatus         @default(DRAFT)
  brandApprovalStatus  ApprovalStatus    @default(PENDING)
  brandApprovedAt      DateTime?
  brandApprovedBy      String?           // User ID yang approve dari brand
  brandRejectionReason String?
  
  influencerApprovalStatus ApprovalStatus @default(PENDING) 
  influencerApprovedAt DateTime?
  influencerApprovedBy String?           // User ID yang approve dari influencer
  influencerRejectionReason String?
  
  adminApprovalStatus  ApprovalStatus    @default(PENDING)
  adminApprovedAt      DateTime?
  adminApprovedBy      String?           // User ID admin yang approve
  adminRejectionReason String?
  
  // Document Management
  documentPath         String?           // Path ke file MOU yang sudah ditandatangani
  digitalSignature     Json?             // Data tanda tangan digital
  
  // Revision Management
  version              Int               @default(1)
  parentMOUId          String?           // Untuk tracking revision
  parentMOU            MOU?              @relation("MOURevision", fields: [parentMOUId], references: [id])
  revisions            MOU[]             @relation("MOURevision")
  revisionNotes        String?           // Catatan revisi
  
  // Audit Trail
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  createdBy            String            // User ID yang membuat MOU
  
  // Relations
  approvals            MOUApproval[]
  amendments           MOUAmendment[]
  
  @@index([status, createdAt])
  @@index([campaignId])
}

// Model untuk tracking approval history
model MOUApproval {
  id          String         @id @default(cuid())
  mouId       String
  mou         MOU            @relation(fields: [mouId], references: [id], onDelete: Cascade)
  
  approverRole UserRole      // BRAND, INFLUENCER, ADMIN
  approverUserId String
  status      ApprovalStatus
  comments    String?
  approvedAt  DateTime       @default(now())
  
  @@index([mouId, approverRole])
}

// Model untuk amendment/addendum MOU
model MOUAmendment {
  id            String    @id @default(cuid())
  mouId         String
  mou           MOU       @relation(fields: [mouId], references: [id], onDelete: Cascade)
  
  amendmentNumber Int     // Amendment ke-berapa
  title         String    // Judul amendment
  description   String    // Deskripsi perubahan
  changedFields Json      // Field yang diubah dan nilai lama/baru
  effectiveDate DateTime  // Tanggal berlaku amendment
  
  status        MOUStatus @default(DRAFT)
  createdAt     DateTime  @default(now())
  createdBy     String    // User ID yang membuat amendment
  
  @@unique([mouId, amendmentNumber])
}

model MOUTemplate {
  id                    String    @id @default(cuid())
  name                  String    // Nama template
  description           String?
  category              String?   // Kategori template (STANDARD, PREMIUM, CUSTOM)
  
  // Template Content
  titleTemplate         String
  termsAndConditions    String    // Template T&C
  cancellationClause    String    // Template cancellation clause
  confidentialityClause String    // Template confidentiality
  intellectualProperty  String    // Template IP clause
  paymentTermsTemplate  String    // Template payment terms
  
  // Template Settings
  isActive              Boolean   @default(true)
  isDefault             Boolean   @default(false)
  minimumBudget         Int?      // Budget minimum untuk template ini
  applicablePlatforms   Json?     // Platform yang applicable (Instagram, TikTok, etc)
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  createdBy             String    // Admin yang buat template
}

enum UserRole {
  ADMIN
  BRAND
  INFLUENCER
}

enum CampaignType {
  DIRECT
  SELF_SERVICE
}

enum CampaignStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
  REJECTED
}

enum NotificationType {
  ROLE_UPDATE
  INVITATION
  CAMPAIGN_APPROVAL
  CAMPAIGN_REJECTION
  SYSTEM
}

enum MetricType {
  CAMPAIGN_START    // metrics saat campaign dimulai
  CAMPAIGN_END      // metrics saat campaign berakhir
  PERIODIC          // metrics rutin/tracking
  MANUAL            // manual entry
}

enum DeliverableStatus {
  PENDING
  IN_PROGRESS  
  SUBMITTED
  APPROVED
  REJECTED
  COMPLETED
  OVERDUE
}

// Enums untuk MOU
enum MOUStatus {
  DRAFT                 // MOU sedang dibuat/draft
  PENDING_BRAND         // Menunggu approval brand
  PENDING_INFLUENCER    // Menunggu approval influencer  
  PENDING_ADMIN         // Menunggu approval admin
  APPROVED              // Sudah diapprove semua pihak
  REJECTED              // Ditolak salah satu pihak
  ACTIVE                // MOU aktif (campaign bisa jalan)
  EXPIRED               // MOU expired
  CANCELLED             // MOU dibatalkan
  AMENDED               // Ada amendment yang pending
}

enum ApprovalStatus {
  PENDING               // Belum diapprove
  APPROVED              // Sudah diapprove
  REJECTED              // Ditolak
  NEEDS_REVISION        // Butuh revisi
}
