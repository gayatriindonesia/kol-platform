"use server";

import { db } from '@/lib/db';

export async function createRateCardIfNeeded(influencerPlatformId: string, engagementRate: number) {
  const platform = await db.influencerPlatform.findUnique({
    where: { id: influencerPlatformId },
    include: { platform: true, influencer: true },
  });

  if (!platform) return;

  const services = await db.service.findMany({
    where: {
      platformId: platform.platformId,
      isActive: true,
    },
  });

  // Base rate calculation based on platform and follower count
  let baseRatePerFollower = 50000; // Default 50K IDR base rate per 1K followers
  
  // Platform-specific multipliers
  const platformMultipliers: Record<string, number> = {
    'TikTok': 1.0,
    'Instagram': 1.2,
    'YouTube': 1.5,
    'Facebook': 0.8,
    'Twitter': 0.7
  };
  
  const platformMultiplier = platformMultipliers[platform.platform.name] || 1.0;
  
  // Follower tier adjustments
  if (platform.followers < 10000) baseRatePerFollower = 30000; // 30K IDR for micro influencers
  else if (platform.followers > 100000) baseRatePerFollower = 75000; // 75K IDR for macro influencers
  else if (platform.followers > 500000) baseRatePerFollower = 100000; // 100K IDR for mega influencers
  
  baseRatePerFollower = Math.floor(baseRatePerFollower * platformMultiplier);

  // Calculate price per 1000 followers with engagement rate multiplier
  const followersInThousands = Math.max(platform.followers / 1000, 1);
  const engagementMultiplier = 1 + (engagementRate / 100) * 0.5; // 50% bonus for high engagement
  
  const estimatedPrice = Math.floor(
    baseRatePerFollower * followersInThousands * engagementMultiplier
  );

  for (const service of services) {
    const existingRate = await db.rateCard.findFirst({
      where: {
        influencerPlatformId,
        serviceId: service.id,
      },
    });

    if (!existingRate) {
      await db.rateCard.create({
        data: {
          influencerPlatformId,
          serviceId: service.id,
          price: estimatedPrice,
          autoGenerated: true,
          description: `Auto-generated: ${platform.platform.name} - ${platform.followers.toLocaleString('id-ID')} followers, ${Math.round(engagementRate)}% engagement rate`,
        },
      });
    }
  }
}

export async function getRateCardsByInfluencerPlatform(influencerPlatformId: string) {
  try {
    console.log('🔍 Fetching rate cards for platform ID:', influencerPlatformId);

    const rateCards = await db.rateCard.findMany({
      where: {
        influencerPlatformId,
      },
      include: {
        service: true,
        influencerPlatform: {
          include: {
            platform: true,
          },
        },
      },
      orderBy: {
        createdAt: 'desc',
      },
    });

    console.log('List Rate Card example:', rateCards);
    console.log('📋 Rate cards count:', rateCards.length);

    // Log detail setiap rate card
    rateCards.forEach((rc, index) => {
      console.log(`Rate Card ${index + 1}:`, {
        id: rc.id,
        price: rc.price,
        priceType: typeof rc.price,
        serviceName: rc.service?.name,
        platformName: rc.influencerPlatform?.platform?.name,
        autoGenerated: rc.autoGenerated
      });
    });

    return { success: true, data: rateCards };
  } catch (error) {
    console.error('Error fetching rate cards:', error);
    return { 
      success: false, 
      error: 'Failed to fetch rate cards',
      data: []
    };
  }
}